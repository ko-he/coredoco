{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/bunkohei/dev/sandbox/tsuncore/next-app/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { writeFile } from 'fs/promises';\nimport { join } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('image') as File;\n\n    if (!file) {\n      return NextResponse.json(\n        { error: 'ファイルがアップロードされていません' },\n        { status: 400 }\n      );\n    }\n\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // ファイル名を生成\n    const uniqueId = uuidv4();\n    const extension = file.name.split('.').pop();\n    const filename = `${uniqueId}.${extension}`;\n\n    // ファイルを保存\n    const uploadDir = join(process.cwd(), 'public', 'uploads');\n    const filepath = join(uploadDir, filename);\n    await writeFile(filepath, buffer);\n\n    // Pythonバックエンドに画像を送信して解析を行う\n    const backendFormData = new FormData();\n    backendFormData.append('image', file);\n\n    const response = await fetch('http://localhost:5000/upload', {\n      method: 'POST',\n      body: backendFormData,\n    });\n\n    if (!response.ok) {\n      throw new Error('Pythonバックエンドからの応答がエラーでした');\n    }\n\n    const result = await response.json();\n\n    return NextResponse.json({\n      filepath: `/uploads/${filename}`,\n      store_info: result.store_info\n    });\n  } catch (error) {\n    console.error('Upload error:', error);\n    return NextResponse.json(\n      { error: 'ファイルのアップロードに失敗しました' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,WAAW;QACX,MAAM,WAAW,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD;QACtB,MAAM,YAAY,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG;QAC1C,MAAM,WAAW,GAAG,SAAS,CAAC,EAAE,WAAW;QAE3C,UAAU;QACV,MAAM,YAAY,CAAA,GAAA,iGAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI,UAAU;QAChD,MAAM,WAAW,CAAA,GAAA,iGAAA,CAAA,OAAI,AAAD,EAAE,WAAW;QACjC,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,4BAA4B;QAC5B,MAAM,kBAAkB,IAAI;QAC5B,gBAAgB,MAAM,CAAC,SAAS;QAEhC,MAAM,WAAW,MAAM,MAAM,gCAAgC;YAC3D,QAAQ;YACR,MAAM;QACR;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAElC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,UAAU,CAAC,SAAS,EAAE,UAAU;YAChC,YAAY,OAAO,UAAU;QAC/B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAqB,GAC9B;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}